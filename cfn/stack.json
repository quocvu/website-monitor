{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Standup SNS topic, subcription, and S3 bucket for this app to use",

  "Metadata": {
    "Description": "Monitor website pages and send SMS if the page is not available"
  },

  "Parameters": {
    "SourceBucket": {
      "Description": "S3 bucket containing the lambda function deployment package",
      "Type": "String"
    },

    "SourceKey": {
      "Description": "S3 object key of the lambda function deployment package",
      "Type": "String"
    },

    "PhoneNumber": {
      "Description": "Phone number to send SMS messages to",
      "Type": "String"
    }
  },

  "Resources": {
    "ErrorCountBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "Tags": [
          { "Key": "app", "Value": "web-monitor" },
          { "Key": "usage", "Value": "store-error-counts" }
        ]
      }
    },

    "AlertsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "website-monitor",
        "Subscription": [
          {
            "Endpoint": { "Ref": "PhoneNumber" },
            "Protocol": "sms"
          }
        ]
      }
    },

    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 90
      }
    },

    "LogStream": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": { "Ref": "LogGroup" }
      }
    },

    "MonitorRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "web-monitor",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Action" : [ "s3:GetObject", "s3:PutObject" ],
                  "Effect" : "Allow",
                  "Resource" : [
                    { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref" : "ErrorCountBucket" }, "/*" ] ] }
                  ]
                },
                {
                  "Action" : [ "sns:Publish" ],
                  "Effect" : "Allow",
                  "Resource" : [
                    { "Ref" : "AlertsTopic" }
                  ]
                },
                {
                  "Action" : [ "logs:PutLogEvents", "logs:DescribeLogStreams", "logs:Create" ],
                  "Effect" : "Allow",
                  "Resource" : [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "MonitorFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "monitor.allSites",
        "Role": { "Fn::GetAtt" : ["MonitorRole", "Arn"] },
        "Code": {
          "S3Bucket": { "Ref": "SourceBucket" },
          "S3Key": { "Ref": "SourceKey" }
        },
        "Runtime": "nodejs",
        "Timeout": "23"
      }
    },

    "MonitorEvent": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(15 minutes)",
        "Targets": [
          {
            "Id": "MonitorScheduler",
            "Arn": { "Fn::GetAtt": [ "MonitorFunction", "Arn" ] }
          }
        ]
      }
    },

    "MonitorPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "MonitorFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "MonitorEvent", "Arn" ] }
      }
    }
  },

  "Outputs": {
    "monitorFunction": {
      "Description": "Name of the Lambda function",
      "Value": { "Ref": "MonitorFunction" }
    },
    "errorCountBucket": {
      "Description": "S3 Bucket storing the error count",
      "Value": { "Ref": "ErrorCountBucket" }
    },
    "alertsTopic": {
      "Description": "SNS Topic to send alerts to",
      "Value": { "Ref": "AlertsTopic" }
    },
    "iamRole": {
      "Description": "Role for this monitoring app",
      "Value": {"Fn::GetAtt": ["MonitorRole", "Arn"] }
    },
    "LogGroup": {
      "Description": "Cloudwatch log group",
      "Value": {"Ref": "LogGroup" }
    },
    "LogStream": {
      "Description": "Cloudwatch log stream",
      "Value": {"Ref": "LogStream" }
    }
  }
}
